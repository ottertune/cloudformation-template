AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Macro that generates the OtterTune tuning permissions for an IAM role 
Resources:
  OtterTuneTuningPolicyMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: OtterTuneTuningPolicy
      FunctionName: !GetAtt OtterTuneTuningPolicyMacroFunction.Arn
  OtterTuneTuningPolicyMacroFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        import traceback, itertools
        def generate_tuning_policy(parameter_group_names, region, account_number):
            if not parameter_group_names or not region or not accout_number:
                return {"Ref" : "AWS::NoValue"}
            parameter_group_names = [pg for pg in parameter_group_names.split(',')]
            return {
                "PolicyName": "OtterTuneTuningPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "rds:ModifyDBParameterGroup",
                            ],
                            "Resource": [f"arn:aws:rds:{region}:{account_number}:pg:{pg_name}" for pg_name in parameter_group_names]
                        },
                    ]
                }
            }
        def handler(event, context):
            try:
                policy_type = event["params"]["PolicyType"]
                if policy_type == "TuningPolicy":
                    pg_names = event["params"]["ParameterGroupNames"].strip()
                    region = event["params"]["Region"]
                    account_number = event["params"]["AccountNumber"]
                    fragment = generate_tuning_policy(pg_names, region, accout_number)
                else:
                    fragment = event["fragment"]
                return {
                    "requestId": event["requestId"],
                    "status": "success",
                    "fragment": fragment,
                }
            except Exception as e:
                traceback.print_exc()
                return {
                    "requestId": event["requestId"],
                    "status": "failure",
                    "errorMessage": str(e),
                }
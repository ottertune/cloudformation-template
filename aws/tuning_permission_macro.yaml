AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Macro that generates the OtterTune tuning permissions for an IAM role 
Resources:
  OtterTuneTuningPolicyMacro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: OtterTuneTuningPolicy
      FunctionName: !GetAtt OtterTuneTuningPolicyMacroFunction.Arn
  OtterTuneTuningPolicyMacroFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: index.handler
      InlineCode: |
        import traceback
        def generate_tuning_policy(pg_names, cluster_pg_names, region, account_number):
            if not (pg_names or cluster_pg_names) or not region or not account_number:
                return {"Ref" : "AWS::NoValue"}
            statements = []
            if pg_names:
                names = [pg for pg in pg_names.split(',')]
                statements.append(
                {
                    "Effect": "Allow",
                        "Action": [
                            "rds:ModifyDBParameterGroup",
                        ],
                    "Resource": [f"arn:aws:rds:{region}:{account_number}:pg:{pg_name}" for pg_name in names]
                })
            if cluster_pg_names:
                names = [cpg for cpg in cluster_pg_names.split(',')]
                statements.append(
                {
                    "Effect": "Allow",
                        "Action": [
                            "rds:ModifyDBClusterParameterGroup",
                        ],
                    "Resource": [f"arn:aws:rds:{region}:{account_number}:cluster-pg:{cpg_name}" for cpg_name in names]
                })
            return {
                "PolicyName": { "Fn::Sub" : [
                    "${StackName}-OtterTuneTuningPolicy", {
                        "StackName": {
                            "Ref": "AWS::StackName"
                        }
                    }
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": statements
                }
            }
        def handler(event, context):
            try:
                policy_type = event["params"]["PolicyType"]
                if policy_type == "OtterTuneTuningPolicy":
                    pg_names = event["params"]["ParameterGroupNames"].strip()
                    cluster_pg_names = event["params"]["ClusterParameterGroupNames"].strip()
                    region = event["params"]["Region"]
                    account_number = event["params"]["AccountNumber"]
                    fragment = generate_tuning_policy(pg_names, cluster_pg_names, region, account_number)
                else:
                    fragment = event["fragment"]
                return {
                    "requestId": event["requestId"],
                    "status": "success",
                    "fragment": fragment,
                }
            except Exception as e:
                traceback.print_exc()
                return {
                    "requestId": event["requestId"],
                    "status": "failure",
                    "errorMessage": str(e),
                }
